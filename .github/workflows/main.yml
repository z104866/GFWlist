name: GFWList 多 DNS 并行解析优化

on:
  schedule:
    - cron: '0 12 * * *'  # UTC 12:00 = 北京时间 20:00
  workflow_dispatch:

jobs:
  resolve-dns:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 下载 GFWList
        run: |
          wget -q https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt -O gfwlist.txt
          if [ $? -ne 0 ]; then
            echo "错误：GFWList 下载失败"
            exit 1
          fi
          
      - name: 安装依赖工具
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
          
      - name: 解码并提取域名
        run: |
          decoded_content=$(base64 -d gfwlist.txt)
          echo "$decoded_content" | grep -E -o "[a-zA-Z0-9][-a-zA-Z0-9._~%+]*(\.[a-zA-Z0-9][-a-zA-Z0-9._~%+]*)+" | sort -u > domains.txt
          
      - name: 过滤非法域名
        run: |
          grep -E '^[a-zA-Z0-9][-a-zA-Z0-9._~%+]*(\.[a-zA-Z0-9][-a-zA-Z0-9._~%+]*)+$' domains.txt > valid_domains.txt
          mv valid_domains.txt domains.txt
          
      - name: 多 DNS 并行解析域名
        run: |
          dns_servers=("8.8.8.8" "8.8.4.4" "1.1.1.1" "1.0.0.1")
          count=0
          > ip_list.txt
          
          domain_count=$(wc -l domains.txt | awk '{print $1}')
          echo "开始解析 $domain_count 个域名，使用多 DNS 并行策略"
          
          while read -r domain; do
            count=$((count+1))
            if [ -n "$domain" ]; then
              echo "解析第 $count 个域名: $domain"
              all_ips=""
              responses=()
              
              # 并行发送解析请求
              for server in "${dns_servers[@]}"; do
                if [[ $server == 8.8.8.8 || $server == 8.8.4.4 ]]; then
                  response=$(curl -s "https://dns.google/resolve?name=$domain&type=A" -H "accept: application/dns-json" --max-time 3 &)
                else
                  response=$(curl -s "https://$server/dns-query?name=$domain&type=A" -H "accept: application/dns-json" --max-time 3 &)
                fi
                responses[$server]=$response
              done
              
              wait  # 等待所有请求完成
              
              # 合并结果
              for server in "${dns_servers[@]}"; do
                resp=${responses[$server]}
                if [ -n "$resp" ]; then
                  if [[ $server == 8.8.8.8 || $server == 8.8.4.4 ]]; then
                    ips=$(echo "$resp" | jq -r '.Answer[].data // empty')
                  else
                    ips=$(echo "$resp" | jq -r '.Answer[].data // empty')
                  fi
                  if [ "$ips" != "empty" ]; then
                    all_ips="$all_ips $ips"
                  fi
                fi
              done
              
              # 去重并保存
              unique_ips=$(echo "$all_ips" | tr ' ' '\n' | sort -u | tr '\n' ' ')
              if [ -n "$unique_ips" ]; then
                echo "$unique_ips" | tr ' ' '\n' >> ip_list.txt
                echo "  解析成功，IP: $unique_ips"
              else
                echo "  所有 DNS 均无法解析 $domain"
              fi
            fi
            
            # 频率控制
            if [ $((count % 20)) -eq 0 ]; then
              echo "  暂停 15 秒，控制并发频率"
              sleep 15
            fi
          done < domains.txt
          
          sort -u ip_list.txt > temp.txt && mv temp.txt ip_list.txt
          echo "解析完成，共获得 $(wc -l ip_list.txt) 个 IP"
          
      - name: 生成 IP 段
        run: |
          awk -F. '{print $1"."$2"."$3".0/24"}' ip_list.txt | sort -u > ip_ranges.txt
          
      - name: 提交结果
        run: |
          git add ip_list.txt ip_ranges.txt
          if git diff --staged --quiet; then
            echo "无更新"
          else
            git commit -m "更新 IP 列表 $(date)"
            git push
          fi
