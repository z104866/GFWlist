name: GFWList 域名解析与 IP 生成（Google DNS 8.8.8.8）

on:
  schedule:
    - cron: '0 12 * * *'  # UTC 12:00 = 北京时间 20:00
  workflow_dispatch:

jobs:
  resolve-dns:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 下载 GFWList
        run: |
          wget -q https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt -O gfwlist.txt
          if [ $? -ne 0 ]; then
            echo "错误：GFWList 下载失败"
            exit 1
          fi
          echo "GFWList 下载完成"
          
      - name: 安装依赖工具
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
          if [ $? -ne 0 ]; then
            echo "错误：依赖工具安装失败"
            exit 1
          fi
          echo "工具安装完成"
          
      - name: Base64 解码并提取域名
        run: |
          if [ ! -f gfwlist.txt ]; then
            echo "错误：未找到 gfwlist.txt"
            exit 1
          fi
          
          # 解码 Base64 内容
          decoded_content=$(base64 -d gfwlist.txt 2>/dev/null)
          if [ $? -ne 0 ]; then
            echo "错误：Base64 解码失败"
            exit 1
          fi
          
          # 提取域名（正则匹配常见格式）
          echo "$decoded_content" | grep -E -o "[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+" | sort -u > domains.txt
          domain_count=$(wc -l domains.txt | awk '{print $1}')
          echo "成功提取 $domain_count 个域名，保存至 domains.txt"
          
      - name: 通过 Google DNS (8.8.8.8) 解析域名
        run: |
          if [ ! -f domains.txt ] || [ $(wc -l domains.txt) -eq 0 ]; then
            echo "警告：未找到可解析的域名，跳过解析"
            touch ip_list.txt
            exit 0
          fi
          
          # 初始化计数器和 IP 列表
          count=0
          > ip_list.txt
          
          echo "开始解析域名，共 $(wc -l domains.txt | awk '{print $1}') 个"
          
          # 遍历域名并解析（每 50 个域名暂停 15 秒，避免 API 限制）
          while read -r domain; do
            count=$((count+1))
            
            if [ -n "$domain" ]; then
              echo "解析第 $count 个域名: $domain"
              
              # 使用 Google DNS-over-HTTPS API 解析 A 记录
              response=$(curl -s "https://8.8.8.8/resolve?name=$domain&type=A" -H "accept: application/dns-json")
              
              if [ $? -ne 0 ]; then
                echo "  curl 请求失败，跳过此域名"
                continue
              fi
              
              # 提取 IP 地址
              ips=$(echo "$response" | jq -r '.Answer[].data' 2>/dev/null)
              
              if [ -n "$ips" ]; then
                echo "$ips" | tr '\n' ' ' | sed 's/ /\n/g' >> ip_list.txt
                echo "  解析成功，IP: $ips"
              else
                echo "  无法解析域名 $domain，响应内容: $response"
              fi
            fi
            
            # 频率控制：每 50 个域名暂停 15 秒
            if [ $((count % 50)) -eq 0 ]; then
              echo "  解析暂停 15 秒，避免 API 频率限制（已解析 $count 个）"
              sleep 15
            fi
          done < domains.txt
          
          # 对 IP 去重并排序
          sort -u ip_list.txt > temp.txt && mv temp.txt ip_list.txt
          ip_count=$(wc -l ip_list.txt | awk '{print $1}')
          echo "解析完成，共获得 $ip_count 个 IP 地址"
          
      - name: 生成 IP 段列表
        run: |
          if [ ! -f ip_list.txt ] || [ $(wc -l ip_list.txt) -eq 0 ]; then
            echo "警告：无 IP 地址可生成网段，跳过此步骤"
            touch ip_ranges.txt
            exit 0
          fi
          
          # 将 IP 转换为 /24 网段（可修改为 /16 等精度）
          awk -F. '{print $1"."$2"."$3".0/24"}' ip_list.txt | sort -u > ip_ranges.txt
          range_count=$(wc -l ip_ranges.txt | awk '{print $1}')
          echo "生成 $range_count 个 IP 段，保存至 ip_ranges.txt"
          
      - name: 提交结果
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add domains.txt ip_list.txt ip_ranges.txt
          if git diff --staged --quiet; then
            echo "没有新 IP 地址更新"
          else
            commit_msg="更新 GFWList IP 列表: $(date +'%Y-%m-%d')"
            git commit -m "$commit_msg"
            git push
          fi
