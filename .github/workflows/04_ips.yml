name: 04_解析 GFWList 域名

on:
  schedule:
    - cron: '30 20 * * *'  # UTC 20:30 = 北京时间 04:30
  workflow_dispatch:

jobs:
  resolve-dns:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 安装Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: 下载GFWList原始文件
        run: |
          curl -sSL https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt -o gfwlist_original.txt
          if [ ! -s gfwlist_original.txt ]; then
            echo "错误：GFWList下载失败"
            exit 1
          fi
          echo "GFWList下载完成"
          
      - name: 解码GFWList
        run: |
          if [ ! -f gfwlist_original.txt ]; then
            echo "错误：未找到原始文件"
            exit 1
          fi
          base64 -d gfwlist_original.txt > gfwlist_decoded.txt 2>/dev/null
          if [ ! -s gfwlist_decoded.txt ]; then
            echo "错误：Base64解码失败"
            exit 1
          fi
          echo "解码完成"
          
      - name: 提取域名
        run: |
          if [ ! -f gfwlist_decoded.txt ]; then
            echo "错误：未找到解码文件"
            exit 1
          fi
          
          node -e "
            const fs = require('fs');
            const content = fs.readFileSync('gfwlist_decoded.txt', 'utf-8');
            const lines = content.split('\\n');
            const domains = new Set();
            
            for (const line of lines) {
              if (!line.trim() || line.startsWith('!') || line.startsWith('[') || line.startsWith('@@')) continue;
              
              let domain = line.replace('||', '').replace('|', '').split('/')[0].trim();
              domain = domain.replace('*.', '');
              const match = domain.match(/[a-zA-Z0-9][-a-zA-Z0-9._]*\\.[a-zA-Z]{2,}$/);
              
              if (match) {
                domains.add(match[0]);
              }
            }
            
            fs.writeFileSync('gfwlist_domains.txt', [...domains].sort().join('\\n'));
            console.log(\`提取完成，域名数量: \${domains.size}\`);
          "
          
      - name: 解析域名获取IP（多轮DNS服务器）
        run: |
          if [ ! -f gfwlist_domains.txt ]; then
            echo "错误：未找到域名文件"
            exit 1
          fi
          
          node -e "
            const fs = require('fs');
            const dns = require('dns');
            const { promisify } = require('util');
            const domains = fs.readFileSync('gfwlist_domains.txt', 'utf-8').split('\\n').filter(d => d.trim());
            const allIps = new Set();
            let totalSuccess = 0;
            let totalFail = 0;
            
            // 三轮DNS服务器配置
            const dnsRounds = [
              { name: '第一轮', servers: ['1.1.1.1', '8.8.8.8'] },
              { name: '第二轮', servers: ['9.9.9.9', '208.67.222.222'] }, // OpenDNS
              { name: '第三轮', servers: ['223.5.5.5', '8.8.4.4'] }      // 阿里DNS + Google备用
            ];
            
            console.log(\`开始解析 \${domains.length} 个域名，每轮50个域名，2秒超时\`);
            
            // 封装带超时的解析函数
            async function resolveWithTimeout(domain, server, timeout = 2000) {
              return new Promise((resolve, reject) => {
                const resolve4 = promisify(dns.resolve4).bind(dns);
                const timeoutId = setTimeout(() => reject(new Error('解析超时')), timeout);
                
                resolve4(domain, { server })
                  .then(ips => {
                    clearTimeout(timeoutId);
                    resolve(ips);
                  })
                  .catch(error => {
                    clearTimeout(timeoutId);
                    reject(error);
                  });
              });
            }
            
            // 单轮解析函数
            async function resolveRound(round) {
              const { name, servers } = round;
              const roundIps = new Set();
              let roundSuccess = 0;
              let roundFail = 0;
              
              console.log(\`\n--- \${name} (DNS: \${servers.join(', ')}) ---\`);
              
              // 分批次解析（50个/批次）
              for (let i = 0; i < domains.length; i += 50) {
                const batch = domains.slice(i, i + 50);
                console.log(\`  处理批次 \${i/50 + 1} / \${Math.ceil(domains.length/50)}\`);
                
                // 并行解析批次内的域名
                await Promise.all(batch.map(async (domain) => {
                  for (const server of servers) {
                    try {
                      const addresses = await resolveWithTimeout(domain, server);
                      for (const ip of addresses) roundIps.add(ip);
                      roundSuccess++;
                      console.log(\`  ✓ 解析成功: \${domain} → \${addresses.join(', ')} (服务器: \${server})\`);
                      return;
                    } catch (error) {
                      roundFail++;
                      // console.log(\`  ✗ 解析失败 (\${server}): \${domain} → \${error.message}\`); // 可选：取消注释显示失败详情
                    }
                  }
                }));
              }
              
              console.log(\`\${name} 统计:\`);
              console.log(\`  成功: \${roundSuccess} 个域名\`);
              console.log(\`  失败: \${roundFail} 个域名\`);
              console.log(\`  本轮IP: \${roundIps.size} 个\`);
              
              totalSuccess += roundSuccess;
              totalFail += roundFail;
              return roundIps;
            }
            
            // 执行三轮解析
            async function runRounds() {
              let roundResults = [];
              for (const round of dnsRounds) {
                const roundIps = await resolveRound(round);
                roundResults.push(roundIps);
              }
              
              // 合并所有IP
              roundResults.forEach(ips => {
                ips.forEach(ip => allIps.add(ip));
              });
              
              // 读取现有IP并去重
              let existingIps = new Set();
              if (fs.existsSync('gfwlist_ips.txt')) {
                const existingContent = fs.readFileSync('gfwlist_ips.txt', 'utf-8');
                existingIps = new Set(existingContent.split('\\n').filter(ip => ip.trim()));
              }
              
              // 计算新增IP
              const newIps = [...allIps].filter(ip => !existingIps.has(ip));
              const finalIps = [...existingIps, ...newIps];
              
              // 写入IP文件（追加新IP）
              if (newIps.length > 0) {
                fs.appendFileSync('gfwlist_ips.txt', '\\n' + newIps.join('\\n'));
                console.log(\`\n追加 \${newIps.length} 个新IP到文件\`);
              } else {
                console.log(\`\n没有新IP需要追加\`);
              }
              
              console.log(\`\n==== 总解析统计 ====\`);
              console.log(\`  总成功: \${totalSuccess} 个域名\`);
              console.log(\`  总失败: \${totalFail} 个域名\`);
              console.log(\`  新增IP: \${newIps.length} 个\`);
              console.log(\`  总IP数量: \${allIps.size} 个\`);
            }
            
            runRounds()
              .catch(error => {
                console.error(\`解析过程出错: \${error.message}\`);
                process.exit(1);
              });
          "
          
      - name: 验证结果文件
        run: |
          if [ ! -f gfwlist_ips.txt ]; then
            echo "错误：未生成IP文件"
            exit 1
          fi
          
          ip_count=$(wc -l gfwlist_ips.txt | awk '{print $1}')
          echo "IP文件包含 $ip_count 个IP"
          
      - name: 提交结果
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add gfwlist_ips.txt
          if git diff --staged --quiet; then
            echo "没有新内容更新"
          else
            commit_msg="更新GFWList IP列表: $(date +'%Y-%m-%d %H:%M')"
            git commit -m "$commit_msg"
            git push
            echo "已推送更新"
          fi
