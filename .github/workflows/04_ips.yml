name: 04_GFWList 域名解析（Node.js版）

on:
  schedule:
    - cron: '30 20 * * *'  # UTC 20:30 = 北京时间 04:30
  workflow_dispatch:

jobs:
  resolve-dns:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 安装Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: 下载GFWList原始文件
        run: |
          curl -sSL https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt -o gfwlist_original.txt
          if [ ! -s gfwlist_original.txt ]; then
            echo "错误：GFWList下载失败"
            exit 1
          fi
          echo "GFWList下载完成"
          
      - name: 解码GFWList
        run: |
          if [ ! -f gfwlist_original.txt ]; then
            echo "错误：未找到原始文件"
            exit 1
          fi
          base64 -d gfwlist_original.txt > gfwlist_decoded.txt 2>/dev/null
          if [ ! -s gfwlist_decoded.txt ]; then
            echo "错误：Base64解码失败"
            exit 1
          fi
          echo "解码完成"
          
      - name: 提取域名
        run: |
          if [ ! -f gfwlist_decoded.txt ]; then
            echo "错误：未找到解码文件"
            exit 1
          fi
          
          # 提取域名（Node.js实现）
          node -e "
            const fs = require('fs');
            const content = fs.readFileSync('gfwlist_decoded.txt', 'utf-8');
            const lines = content.split('\\n');
            const domains = new Set();
            
            for (const line of lines) {
              if (!line.trim() || line.startsWith('!') || line.startsWith('[') || line.startsWith('@@')) continue;
              
              // 处理规则格式
              let domain = line.replace('||', '').replace('|', '').split('/')[0].trim();
              // 移除通配符前缀
              domain = domain.replace('*.', '');
              // 提取有效域名
              const match = domain.match(/[a-zA-Z0-9][-a-zA-Z0-9._]*\\.[a-zA-Z]{2,}$/);
              
              if (match) {
                domains.add(match[0]);
              }
            }
            
            fs.writeFileSync('gfwlist_domains.txt', [...domains].sort().join('\\n'));
            console.log(\`提取完成，域名数量: \${domains.size}\`);
          "
          
      - name: 解析域名获取IP（Node.js版）
        run: |
          if [ ! -f gfwlist_domains.txt ]; then
            echo "错误：未找到域名文件"
            exit 1
          fi
          
          # 解析域名（Node.js实现，支持多DNS服务器）
          node -e "
            const fs = require('fs');
            const dns = require('dns');
            const domains = fs.readFileSync('gfwlist_domains.txt', 'utf-8').split('\\n').filter(d => d.trim());
            const ips = new Set();
            const failedDomains = [];
            const dnsServers = ['8.8.8.8', '1.1.1.1', '9.9.9.9', '84.200.69.80', '8.20.247.20'];
            let successCount = 0;
            let failCount = 0;
            
            console.log(\`开始解析 \${domains.length} 个域名\`);
            
            // 解析单个域名
            async function resolveDomain(domain) {
              for (const server of dnsServers) {
                try {
                  // 设置DNS服务器
                  const resolver = new dns.Resolver();
                  resolver.setServers([server]);
                  resolver.setTimeout(5000);
                  
                  const addresses = await resolver.resolve4(domain);
                  for (const ip of addresses) {
                    ips.add(ip);
                  }
                  
                  console.log(\`✓ 解析成功: \${domain} → \${addresses.join(', ')}\`);
                  successCount++;
                  return;
                } catch (error) {
                  console.log(\`✗ 解析失败 (\${server}): \${domain} → \${error.message}\`);
                  continue;
                }
              }
              
              failedDomains.push(domain);
              failCount++;
            }
            
            // 并行解析（Promise.all）
            const resolvePromises = domains.map(resolveDomain);
            
            Promise.all(resolvePromises)
              .then(() => {
                // 保存结果
                fs.writeFileSync('gfwlist_ips.txt', [...ips].sort().join('\\n'));
                fs.writeFileSync('failed_domains.txt', failedDomains.join('\\n'));
                
                console.log(\`解析完成:\`);
                console.log(\`  成功: \${successCount} 个域名\`);
                console.log(\`  失败: \${failCount} 个域名\`);
                console.log(\`  生成IP: \${ips.size} 个\`);
              })
              .catch(error => {
                console.error(\`解析过程出错: \${error.message}\`);
                process.exit(1);
              });
          "
          
      - name: 验证结果文件
        run: |
          if [ ! -f gfwlist_ips.txt ]; then
            echo "错误：未生成IP文件"
            exit 1
          fi
          
          ip_count=$(wc -l gfwlist_ips.txt | awk '{print $1}')
          echo "IP文件包含 $ip_count 个IP"
          
      - name: 提交结果
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add gfwlist_ips.txt gfwlist_domains.txt
          if git diff --staged --quiet; then
            echo "没有新内容更新"
          else
            commit_msg="更新GFWList IP列表: $(date +'%Y-%m-%d %H:%M')"
            git commit -m "$commit_msg"
            git push
            echo "已推送更新"
          fi
