name: GFWList 域名解析（优化版，不生成失败域名文件）

on:
  schedule:
    - cron: '30 20 * * *'  # UTC 20:30 = 北京时间 04:30
  workflow_dispatch:

jobs:
  resolve-dns:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 安装Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: 下载GFWList原始文件
        run: |
          curl -sSL https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt -o gfwlist_original.txt
          if [ ! -s gfwlist_original.txt ]; then
            echo "错误：GFWList下载失败"
            exit 1
          fi
          echo "GFWList下载完成"
          
      - name: 解码GFWList
        run: |
          if [ ! -f gfwlist_original.txt ]; then
            echo "错误：未找到原始文件"
            exit 1
          fi
          base64 -d gfwlist_original.txt > gfwlist_decoded.txt 2>/dev/null
          if [ ! -s gfwlist_decoded.txt ]; then
            echo "错误：Base64解码失败"
            exit 1
          fi
          echo "解码完成"
          
      - name: 提取域名
        run: |
          if [ ! -f gfwlist_decoded.txt ]; then
            echo "错误：未找到解码文件"
            exit 1
          fi
          
          node -e "
            const fs = require('fs');
            const content = fs.readFileSync('gfwlist_decoded.txt', 'utf-8');
            const lines = content.split('\\n');
            const domains = new Set();
            
            for (const line of lines) {
              if (!line.trim() || line.startsWith('!') || line.startsWith('[') || line.startsWith('@@')) continue;
              
              let domain = line.replace('||', '').replace('|', '').split('/')[0].trim();
              domain = domain.replace('*.', '');
              const match = domain.match(/[a-zA-Z0-9][-a-zA-Z0-9._]*\\.[a-zA-Z]{2,}$/);
              
              if (match) {
                domains.add(match[0]);
              }
            }
            
            fs.writeFileSync('gfwlist_domains.txt', [...domains].sort().join('\\n'));
            console.log(\`提取完成，域名数量: \${domains.size}\`);
          "
          
      - name: 解析域名获取IP（优化并发和超时）
        run: |
          if [ ! -f gfwlist_domains.txt ]; then
            echo "错误：未找到域名文件"
            exit 1
          fi
          
          node -e "
            const fs = require('fs');
            const dns = require('dns');
            const { promisify } = require('util');
            const domains = fs.readFileSync('gfwlist_domains.txt', 'utf-8').split('\\n').filter(d => d.trim());
            const ips = new Set();
            const dnsServers = ['1.1.1.1', '8.8.8.8']; // 只保留两个DNS服务器
            let successCount = 0;
            let failCount = 0;
            
            console.log(\`开始解析 \${domains.length} 个域名，并发批次: 30\`);
            
            // 封装带超时的解析函数（3秒超时）
            async function resolveWithTimeout(domain, server, timeout = 3000) {
              return new Promise((resolve, reject) => {
                const resolve4 = promisify(dns.resolve4).bind(dns);
                
                const timeoutId = setTimeout(() => {
                  reject(new Error('解析超时'));
                }, timeout);
                
                resolve4(domain, { server })
                  .then(ips => {
                    clearTimeout(timeoutId);
                    resolve(ips);
                  })
                  .catch(error => {
                    clearTimeout(timeoutId);
                    reject(error);
                  });
              });
            }
            
            // 解析单个域名
            async function resolveDomain(domain) {
              for (const server of dnsServers) {
                try {
                  const addresses = await resolveWithTimeout(domain, server);
                  for (const ip of addresses) {
                    ips.add(ip);
                  }
                  
                  console.log(\`✓ 解析成功: \${domain} → \${addresses.join(', ')} (服务器: \${server})\`);
                  successCount++;
                  return;
                } catch (error) {
                  console.log(\`✗ 解析失败 (\${server}): \${domain} → \${error.message}\`);
                  failCount++;
                  continue;
                }
              }
            }
            
            // 并行解析（30个域名/批次）
            async function parallelResolve(domains, concurrency = 30) {
              const results = [];
              for (let i = 0; i < domains.length; i += concurrency) {
                const batch = domains.slice(i, i + concurrency);
                const batchResults = await Promise.all(batch.map(resolveDomain));
                results.push(...batchResults);
                console.log(\`完成批次 \${i/concurrency + 1} / \${Math.ceil(domains.length/concurrency)}\`);
              }
              return results;
            }
            
            parallelResolve(domains)
              .then(() => {
                // 读取现有IP并去重
                let existingIps = new Set();
                if (fs.existsSync('gfwlist_ips.txt')) {
                  const existingContent = fs.readFileSync('gfwlist_ips.txt', 'utf-8');
                  existingIps = new Set(existingContent.split('\\n').filter(ip => ip.trim()));
                }
                
                // 合并新IP并去重
                const allIps = new Set([...existingIps, ...ips]);
                
                // 追加新IP到文件（保持原有顺序并去重）
                const newIps = [...allIps].filter(ip => !existingIps.has(ip));
                if (newIps.length > 0) {
                  fs.appendFileSync('gfwlist_ips.txt', '\\n' + newIps.join('\\n'));
                  console.log(\`追加 \${newIps.length} 个新IP到文件\`);
                } else {
                  console.log(\`没有新IP需要追加\`);
                }
                
                console.log(\`解析完成:\`);
                console.log(\`  成功: \${successCount} 个域名\`);
                console.log(\`  失败: \${failCount} 个域名\`);
                console.log(\`  新增IP: \${newIps.length} 个\`);
                console.log(\`  总IP数量: \${allIps.size} 个\`);
              })
              .catch(error => {
                console.error(\`解析过程出错: \${error.message}\`);
                process.exit(1);
              });
          "
          
      - name: 验证结果文件
        run: |
          if [ ! -f gfwlist_ips.txt ]; then
            echo "错误：未生成IP文件"
            exit 1
          fi
          
          ip_count=$(wc -l gfwlist_ips.txt | awk '{print $1}')
          echo "IP文件包含 $ip_count 个IP"
          
      - name: 提交结果
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add gfwlist_ips.txt
          if git diff --staged --quiet; then
            echo "没有新内容更新"
          else
            commit_msg="更新GFWList IP列表: $(date +'%Y-%m-%d %H:%M')"
            git commit -m "$commit_msg"
            git push
            echo "已推送更新"
          fi
